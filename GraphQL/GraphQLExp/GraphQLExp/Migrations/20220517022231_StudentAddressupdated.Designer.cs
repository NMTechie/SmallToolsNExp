// <auto-generated />
using GraphQLExp.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GraphQLExp.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20220517022231_StudentAddressupdated")]
    partial class StudentAddressupdated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GraphQLExp.Models.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressID"), 1L, 1);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pincode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("GraphQLExp.Models.Score", b =>
                {
                    b.Property<int>("ScoreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScoreID"), 1L, 1);

                    b.Property<int>("MarksForStudentStudentId")
                        .HasColumnType("int");

                    b.Property<int>("MarksForSubjectSubjectId")
                        .HasColumnType("int");

                    b.Property<int>("MarksObtained")
                        .HasColumnType("int");

                    b.HasKey("ScoreID");

                    b.HasIndex("MarksForStudentStudentId");

                    b.HasIndex("MarksForSubjectSubjectId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("GraphQLExp.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"), 1L, 1);

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.HasIndex("AddressID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("GraphQLExp.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"), 1L, 1);

                    b.Property<int>("AllotedTime")
                        .HasColumnType("int");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectWeightage")
                        .HasColumnType("int");

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("GraphQLExp.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"), 1L, 1);

                    b.Property<int>("ConatctAddressID")
                        .HasColumnType("int");

                    b.Property<string>("TeacherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeacherId");

                    b.HasIndex("ConatctAddressID");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("StudentSubject", b =>
                {
                    b.Property<int>("OptedByStudentId")
                        .HasColumnType("int");

                    b.Property<int>("OptedSubjectsSubjectId")
                        .HasColumnType("int");

                    b.HasKey("OptedByStudentId", "OptedSubjectsSubjectId");

                    b.HasIndex("OptedSubjectsSubjectId");

                    b.ToTable("StudentSubject");
                });

            modelBuilder.Entity("SubjectTeacher", b =>
                {
                    b.Property<int>("AllotedTeachersTeacherId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectsAllotedSubjectId")
                        .HasColumnType("int");

                    b.HasKey("AllotedTeachersTeacherId", "SubjectsAllotedSubjectId");

                    b.HasIndex("SubjectsAllotedSubjectId");

                    b.ToTable("SubjectTeacher");
                });

            modelBuilder.Entity("GraphQLExp.Models.Score", b =>
                {
                    b.HasOne("GraphQLExp.Models.Student", "MarksForStudent")
                        .WithMany()
                        .HasForeignKey("MarksForStudentStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphQLExp.Models.Subject", "MarksForSubject")
                        .WithMany()
                        .HasForeignKey("MarksForSubjectSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarksForStudent");

                    b.Navigation("MarksForSubject");
                });

            modelBuilder.Entity("GraphQLExp.Models.Student", b =>
                {
                    b.HasOne("GraphQLExp.Models.Address", "Address")
                        .WithMany("Students")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("GraphQLExp.Models.Teacher", b =>
                {
                    b.HasOne("GraphQLExp.Models.Address", "Conatct")
                        .WithMany()
                        .HasForeignKey("ConatctAddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conatct");
                });

            modelBuilder.Entity("StudentSubject", b =>
                {
                    b.HasOne("GraphQLExp.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("OptedByStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphQLExp.Models.Subject", null)
                        .WithMany()
                        .HasForeignKey("OptedSubjectsSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SubjectTeacher", b =>
                {
                    b.HasOne("GraphQLExp.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("AllotedTeachersTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphQLExp.Models.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsAllotedSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GraphQLExp.Models.Address", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
